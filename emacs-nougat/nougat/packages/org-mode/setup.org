* org-mode
** setup
Getting org to play with straight.el is a little fussy.
*** fix-org-git-version
#+begin_src emacs-lisp
  (defun fix-org-git-version ()
    "The Git version of org-mode.
    Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (git-run "describe"
                "--match=release\*"
                "--abbrev=6"
                "HEAD"))))
#+end_src

*** fix-org-release
#+begin_src emacs-lisp
  (defun fix-org-release ()
    "The release version of org-mode.
    Inserted by installing org-mode or when a release is made."
    (require 'git)
    (let ((git-repo (expand-file-name
                     "straight/repos/org/" user-emacs-directory)))
      (string-trim
       (string-remove-prefix
        "release_"
        (git-run "describe"
                 "--match=release\*"
                 "--abbrev=0"
                 "HEAD")))))
#+end_src

*** install package
#+begin_src emacs-lisp
    (use-package org
      :mode ("\\.org\\'" . org-mode)
      :bind (:map org-mode-map
                  ("M-n" . outline-next-visible-heading)
                  ("M-p" . outline-previous-visible-heading)
                  ("M-RET" . org-insert-heading)
                  ("C-c l" . org-store-link)
                  ("C-c a" . org-agenda)
                  )
      :config
      ;; This forces straight to load the package immediately in an attempt to avoid the
      ;; Org that ships with Emacs.
      (require 'org)
      (defalias #'org-git-version #'fix-org-git-version)
      (defalias #'org-release #'fix-org-release)
      ;; fontify code in code blocks
      (setq org-src-fontify-natively t)
      ;; Enable org capture
      (require 'org-capture)

      ;; Enable template expansion (<s, <q, etc.)
      (require 'org-tempo)
      ;; ignore flycheck files when looking in agenda
      (setq org-agenda-file-regexp "\\`[^\\(.\\|flycheck_\\)].*\\.org\\'")
      ;; log  TODO state changes into the default LOGBOOK drawer.
      (setq org-log-into-drawer t)
      ;; wrap agenda tags properly for alignment
      (setq org-agenda-tags-column -79)
      ;; start with follow-mode on in agenda
      (setq org-agenda-start-with-follow-mode t)
      ;; add counsel-mode to org speecbars
      (setq org-use-speed-commands t)
      (setq org-speed-commands-user (quote (("o" . counsel-outline))))
      )
#+end_src

** look
*** indent by header level
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'org-indent-mode)
#+end_src
*** superscripts
require subscripts to need curlies: camel_case won't display weirdly this way
#+begin_src emacs-lisp
(setq org-use-sub-superscripts "{}")
#+end_src

*** pretty heading bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

*** theme customizations
#+begin_src emacs-lisp
  (defvar org-beautify-font "Menlo")
(when window-system
  (use-package org-beautify-theme)
  (let* ((background-color (face-background 'default nil 'default))
         (padding nil))
    (setq org-ellipsis " â–¿")
    (setq org-hide-emphasis-markers t)
    (setq org-hide-block-startup nil)
    (setq org-fontify-whole-heading-line t)
    (setq org-agenda-block-separator "")
    (set-face-attribute 'default nil :height 140)
    (custom-theme-set-faces 'org-beautify
                            `(org-agenda-structure
                              ((t
                                (:inherit default
                                          :height 2.0
                                          :underline nil))))
                            `(org-level-3
                              ((t (:box ,padding))))
                            `(org-level-2
                              ((t
                                (:height 1.25 :box ,padding))))
                            `(org-level-1
                              ((t (:height 1.5 :box ,padding))))
                            `(org-list-dt
                              ((t
                                (:inherit default height 2.0))))
                            `(org-ellipsis
                              ((t (:inherit org-level-faces))))
                            `(org-meta-line
                              ((t
                                (:family org-beautify-font
                                         :slant italic
                                         :height 0.9
                                         :foreground "#777777"))))
                            `(org-document-info-keyword
                              ((t
                                (:inherit default
                                          :family org-beautify-font
                                          :height 0.8
                                          :foreground "#AA7777"))))
                            `(org-document-title
                              ((t
                                (:inherit org-level-1
                                          :height 1.0
                                          :underline nil
                                          :box ,padding))))
                            `(org-checkbox
                              ((t
                                (:box (:color "#93a1a1"
                                              :style "released-button")))))
                            `(org-headline-done
                              ((t (:strike-through t))))
                            `(org-block
                              ((t
                                (:background "#373737"
                                             :box nil
                                             :height 1.2
                                             :family "Menlo"))))
                            `(org-block-begin-line
                              ((t
                                (:family org-beautify-font
                                         :height 0.8
                                         :foreground "#777777"
                                         :background "#222222"))))
                            `(org-block-end-line
                              ((t (:inherit org-block-begin-line))))
                            `(org-done
                              ((t (:strike-through t))))))
)
#+end_src

** feel
*** auto-fill paragraphs
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

*** respect content on heading insert
If you try to insert a heading in the middle of an entry, don't split it in half, but
instead insert the new heading after the end of the current entry.

#+begin_src emacs-lisp
  (setq org-insert-heading-respect-content nil)
#+end_src

*** ensure one-line between headers
#+begin_src emacs-lisp
  ;; (defun org-mode--ensure-one-blank-line ()
  ;;   (save-excursion (goto-char (point-min))
  ;;                   (while (re-search-forward "#\\+[a-z_]+\\s-\\*" nil t)
  ;;                     (replace-match "#+end_src

  ;; *")
  ;;                     (call-interactively 'org-previous-visible-heading)
  ;;                     (call-interactively 'org-cycle)
  ;;                     (call-interactively 'org-cycle))
  ;;                   (org-save-outline-visibility t
  ;;                     (org-mode))))

  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             (add-hook 'before-save-hook 'org-mode--ensure-one-blank-line nil 'make-it-local)))
#+end_src

*** speed keys
[[https://www.gnu.org/software/emacs/manual/html_node/org/Speed-keys.html][speed keys]]
#+begin_src emacs-lisp
(setq org-use-speed-commands t)
#+end_src
