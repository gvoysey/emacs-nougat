* amazon book capture :experimental:
#+begin_src emacs-lisp :results silent
  (use-package esxml
    :config (require 'esxml-query))

  (use-package org-web-tools)

  (defun amazon-fetch-as-tree (url)
    (let ((html (org-web-tools--get-url url)))
      (with-temp-buffer
        (insert html)
        (libxml-parse-html-region (point-min) (point-max)))))

  (defun amazon-find-item-in-list (target list p)
    (cl-loop for li in list
             for (field value) = (funcall p li)
             when (equal field target)
             return (s-trim value)))

  (defun amazon-find-swatch (tree)
    (let ((swatches (esxml-query-all "div#tmmSwatches li" tree)))
      (loop for i
            from 0
            for li in swatches
            when (esxml--node-matches-modifier-p li 'class "selected")
            return i)))

  (defun amazon-default-details (tree)
    (esxml-query-all "table#productDetailsTable ul li" tree))

  (defun amazon-default-detail (target tree)
    (let ((details (amazon-default-details tree)))
      (amazon-find-item-in-list
       target details (lambda (li) (message (format "LI: %s" li))
                        (ignore-errors
                          (-let (((_ _ (_ _ field) value) li))
                            (list field value)))))))

  (defun amazon-default-author (tree)
    (or (esxml-query "span.author .contributorNameID > *" tree)
        (esxml-query "span.author .a-link-normal > *" tree)))

  (defun amazon-title-date (tree)
    (let* ((ele (esxml-query-all "div#booksTitle h1#title > span *" tree))
          (date (third ele)))
      (s-replace "– " "" date)))

  (defun amazon-default-date (tree)
    (let ((raw (amazon-default-detail "Publication Date:" tree)))
      (s-replace "– " "" raw)))

  (defun amazon-audiobook-date (tree)
    (amazon-default-detail "Audible.com Release Date:" tree))

  (defun amazon-default-publisher (tree)
    (replace-regexp-in-string (rx " (" (1+ anything) ")") ""
                              (amazon-default-detail "Publisher:" tree)))

  (defun amazon-default-asin (tree) (amazon-default-detail "ASIN:" tree))

  (defun amazon-default-isbn-10 (tree) (amazon-default-detail "ISBN-10:" tree))

  (defun amazon-default-isbn-13 (tree) (amazon-default-detail "ISBN-13:" tree))

  (defun amazon-default-strategy ()
    (list :author 'amazon-default-author
          :title 'amazon-default-title
          :date 'amazon-default-date
          :asin 'amazon-default-asin
          :publisher 'amazon-default-publisher
          :isbn-10 'amazon-default-isbn-10
          :isbn-13 'amazon-default-isbn-13))

  (defun amazon-merge-plist (first second)
    (loop for (key value) on second by 'cddr
          do (setq first (plist-put first key value)))
    first)

  (defun amazon-kindle-strategy ()
    (amazon-merge-plist
     (amazon-default-strategy) (list :format '(lambda (tree) "kindle"))))

  (defun amazon-hardcover-strategy ()
    (amazon-merge-plist
     (amazon-default-strategy) (list :format '(lambda (tree) "hardcover"))))

  (defun amazon-paperback-strategy ()
    (amazon-merge-plist
     (amazon-default-strategy) (list :format '(lambda (tree) "paperback"))))

  (defun amazon-audiobook-strategy ()
    (amazon-merge-plist
     (org-plist-delete (amazon-default-strategy) :isbn-10)
     (list :format '(lambda (tree) "audiobook")
           :date 'amazon-audiobook-date)))

  (defun amazon-is-kindle (tree)
    (ignore-errors
      (string= (esxml-query ".selected .a-button-text span *" tree) "Kindle")))

  (defun amazon-is-hardcover (tree)
    (ignore-errors
      (string= (esxml-query ".selected .a-button-text span *" tree) "Hardcover")))

  (defun amazon-is-paperback (tree)
    (ignore-errors
      (string= (esxml-query ".selected .a-button-text span *" tree) "Paperback")))

  (defun amazon-is-audiobook (tree)
    (ignore-errors
      (esxml-query ".selected .audibleTitle" tree) (amazon-audiobook-strategy)))

  (defun amazon-pick-strategy (tree)
    (cond
        ((amazon-is-kindle tree) (amazon-kindle-strategy))
        ((amazon-is-hardcover tree) (amazon-hardcover-strategy))
        ((amazon-is-paperback tree) (amazon-paperback-strategy))
        ((amazon-is-audiobook tree) (amazon-audiobook-strategy))))

  (defun amazon-execute-strategy (strategy tree)
    (loop for (key value) on strategy by 'cddr
          append (list key (funcall value tree))))

  (defun amazon-book-data (url)
    "Return plist of data for book at Amazon URL."
    (let* ((tree (amazon-fetch-as-tree url))
           (strategy (amazon-pick-strategy tree)))
      (amazon-execute-strategy strategy tree)))

  (defun amazon-key-name (key)
    (--> key
         (symbol-name it)
         (replace-regexp-in-string "^:" "" it)
         (upcase it)))

  (defun amazon-create-property-drawer (data)
    (list 'property-drawer nil
          (cl-loop for (key value) on data by 'cddr
                   for key = (amazon-key-name key)
                   for pair = (list :key key :value value)
                   when value
                   collect (list 'node-property pair))))

  (defun amazon-insert-book (&optional url)
    "Insert Org entry for book at URL."
    (interactive)
    (when-let ((url (or url (org-web-tools--get-first-url)))
               (data (amazon-book-data url))
               (property-drawer (amazon-create-property-drawer data))
               (author (plist-get data :author))
               (title (plist-get data :title))
               (link (org-make-link-string url title))
               (heading (format "%s, %s" author link))
               (element (org-element-create 'headline (list :level 1 :title heading)
                                            property-drawer))
               (string (org-element-interpret-data element)))
      (kill-new string)
      (save-excursion
        (beginning-of-line)
        (org-paste-subtree))))
#+end_src

