:display-options:
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+language: en
#+startup: overview indent align content
#+babel: :cache no :results output silent
#+options: ^:nil num:nil tags:nil toc:nil* OS-specific

#+title: Emacs config, org-mode style.
#+author: grym
#+description: A literate programming-style exposition of my Emacs configuration
:end:
This is the current version of my emacs configuration.  It is rendered to a
byte-compiled =init.el= by way of a slightly kludgey bash script.

Commented-out org-mode headings are neither shown here nor present in the tangled
resulting elisp, but they are present in [[https://github.com/gvoysey/emacs.d][the repo]] that houses this document.

#+INCLUDE: "./base.org"
* os-specific configurations
Some things only need to be tweaked for certain OSes, and happen early -- in this
case, before the package manager is initialized.
** mac os
*** Disable âŒ˜-q
Accidentally closing your editor window when you don't mean to just sucks.  In Linux,
we can handle this at the desktop environment/window manager level; on macOS, it's
easier to just disable the key inside of emacs itself.
#+begin_src emacs-lisp :results silent
  (when (eq system-type 'darwin)
    (global-unset-key (kbd "s-q")))
#+end_src

** COMMENT linux
*** Disable doc-view-mode defaults for pdf files
I prefer side-by-side pdf viewers over the in-emacs option for rendering PDFs.  This
forces it.
#+begin_src emacs-lisp :results silent
(defun ensc/mailcap-mime-data-filter (filter)
  ""
  (mapcar (lambda(major)
        (append (list (car major))
            (remove nil
                (mapcar (lambda(minor)
                      (when (funcall filter (car major) (car minor) (cdr minor))
                    minor))
                    (cdr major)))))
      mailcap-mime-data))

(defun ensc/no-pdf-doc-view-filter (major minor spec)
  (if (and (string= major "application")
       (string= minor "pdf")
       (member '(viewer . doc-view-mode) spec))
      nil
    t))

(eval-after-load 'mailcap
  '(progn
     (setq mailcap-mime-data
       (ensc/mailcap-mime-data-filter 'ensc/no-pdf-doc-view-filter))))
#+end_src

* personal variables
Set up some variables pointing to where normal lab notebook things live.
** my/org-path-name
Part of this configuration's purpose is to use emacs as a digital lab notebook, which
is a git repo.  This is its canonical location.
#+begin_src emacs-lisp :results silent
  (defvar my/org-path-name (expand-file-name "~/lab-notebook/"))
#+end_src

** my/org-file-name
Set up a convenience function for path manipulation inside the lab notebook.
#+begin_src emacs-lisp :results silent
  (defun my/make-org-file-name (file-name)
    (concat my/org-path-name file-name))
#+end_src

** my/notes-file-name
The lab notebook in question has a central org-mode document where most of the work happens.
#+begin_src emacs-lisp :results silent
  (defvar my/notes-file-name (my/make-org-file-name "notes.org"))
#+end_src

** my/template-directory
#+begin_src emacs-lisp :results silent
  (defvar my/template-directory (concat my/org-path-name "templates"))
#+end_src

** my/make-template-file-name
#+begin_src emacs-lisp :results silent
  (defun my/make-template-file-name (file-name)
    (concat my/template-directory file-name))
#+end_src

* themes
Emacs has many themes that it can use.  One set of them are configured here.
** COMMENT solarized-theme
Solarized is a nice theme.  Easy on the eyes.  The problem with themes is that I like
to use emacsclient as ~exec emacsclient -c -a="" "$@" & > /dev/null~, but if you do
this, the theme comes out all weird the first time because emacs doesn't know if it
has a GUI or not, so it reverts to a halfassed guess of what terminal colors it might
have available to it.

The solution is to delay theme load for a few seconds until the GUI comes up and then
it works fine. [[https://old.reddit.com/r/emacs/comments/3a5kim/emacsclient_does_not_respect_themefont_setting/cs9roe4/][this]] reddit post lead to [[https://github.com/kaushalmodi/.emacs.d/blob/f3c44e933f45dfdb760540e9f86acc91b55ab94a/init.el#L293-L304][this]] solution.
#+begin_src emacs-lisp :results silent
  (use-package solarized-theme

   :straight (solarized-theme :type git
                              :host github
                              :repo "bbatsov/solarized-emacs")
   :config
   (load-theme 'solarized-wombat-dark t)
   :defer 1
  )
#+end_src
** material-theme

#+begin_src emacs-lisp :results silent
  (use-package material-theme
   :straight (emacs-material-theme :type git
                 :host github
                 :repo "cpaulik/emacs-material-theme")
    :config
   (load-theme 'material t)
   :defer 1
       )
#+end_src

* emacs
Configuration related core editor functions are here.
#+INCLUDE: "../nougat/emacs/fonts.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/autosaves.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/backups.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/cursor.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/disable.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/editing.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/key-bindings.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/minor-modes.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/modeline.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/undo-tree.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/diff-kill.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/flycheck.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/neotree.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/dired.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/popwin.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/ws-butler.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/avy.org" :minlevel 2
** multiple-cursors
[[https://github.com/magnars/multiple-cursors.el][Multiple Cursors]] is an emacs package to provide Sublime Text-like multiple selections.

#+begin_src emacs-lisp :results silent
  (use-package region-bindings-mode
    :config (region-bindings-mode-enable))
#+end_src
#+begin_src emacs-lisp :results silent
  (use-package expand-region
    :straight (expand-region :type git :host github :repo "magnars/expand-region.el")
    :bind (("M-2" . er/expand-region))
    :config (pending-delete-mode 1
                                 ))

#+end_src
#+begin_src emacs-lisp :results silent
  (use-package multiple-cursors
    :bind (:map region-bindings-mode-map
                ("a" . mc/mark-all-like-this)
                ("p" . mc/mark-previous-like-this)
                ("n" . mc/mark-next-like-this)
                ("P" . mc/unmark-previous-like-this)
                ("N" . mc/unmark-next-like-this)
                ("[" . mc/cycle-backward)
                ("]" . mc/cycle-forward)
                ("m" . mc/mark-more-like-this-extended)
                ("h" . mc-hide-unmatched-lines-mode)
                ("\\" . mc/vertical-align-with-space)
                ("#" . mc/insert-numbers) ; use num prefix to set the starting number
                ("^" . mc/edit-beginnings-of-lines)
                ("$" . mc/edit-ends-of-lines))
    )
#+end_src
** rg.el
#+begin_src emacs-lisp :results silent
   (use-package rg
    :straight (rg :type git :host github :repo "dajva/rg.el")
    :config
    (rg-enable-menu)
    )
#+end_src
** fzf
#+begin_src emacs-lisp :results silent
(use-package fzf
 :straight (fzf :type git :host github :repo "bling/fzf.el")
 :config
 )
#+end_src

** bm
#+begin_src emacs-lisp :results silent
  (use-package bm
    :bind (("<C-f2>" . bm-toggle)
           ("<f2>" . bm-next)
           ("<S-f2>" . bm-previous)))
(global-set-key (kbd "<left-fringe> <mouse-5>") 'bm-next-mouse)
(global-set-key (kbd "<left-fringe> <mouse-4>") 'bm-previous-mouse)
(global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
#+end_src

** COMMENT latex-input
#+begin_src emacs-lisp :results silent
(use-package latex
 :straight (latex :type git :host github :repo "clarkgrubb/latex-input" :files ("latex.el"))
 )
#+end_src

** olivetti
#+begin_src emacs-lisp :results silent
  (use-package olivetti
   :straight (olivetti :type git :host github :repo "rnkn/olivetti")
   :config
 (setq olivetti-body-width 0.75
   ))
#+end_src

** COMMENT poly-org
#+begin_src emacs-lisp :results silent
  ;; (use-package poly-org
  ;;   :hook ((org-mode). poly-org-mode))
#+end_src
** deadgrep
#+begin_src emacs-lisp :results silent
(use-package deadgrep)
#+end_src
** emojify
#+begin_src emacs-lisp :results silent
  (use-package emojify
    :hook (after-init . global-emojify-mode)
  )
#+end_src

** general
#+begin_src emacs-lisp :results silent
  (use-package general
    :straight (general :type git :host github :repo "noctuid/general.el"))
#+end_src

#+RESULTS:

** make directories on the fly
#+begin_src emacs-lisp :results silent
  (defadvice find-file (before make-directory-maybe (filename &optional wildcards) activate)
    "Create parent directory if not exists while visiting file."
    (unless (file-exists-p filename)
      (let ((dir (file-name-directory filename)))
        (unless (file-exists-p dir)
          (make-directory dir t))))) ;; todo change this to prompt?
#+end_src

** unicode-fonts
#+begin_src emacs-lisp :results silent
  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup)
    (set-fontset-font t 'symbol "Noto Color Emoji"))
#+end_src
hack up font injection, cf [[https://blog.mudit.xyz/posts/angels-and-daemons-a-tale-of-emojis-in-emacs][blog]].
#+begin_src emacs-lisp :results silent
;; Add Apple Color Emoji to the default symbol fontset used by Emacs
(defun zdx/set-emoji-font ()
  (set-fontset-font "fontset-default" 'symbol "Noto Color Emoji" nil 'prepend))

;; Call the config function once and then remove the handler
(defun zdx/set-emoji-font-in-frame (frame)
  (with-selected-frame frame
    (zdx/set-emoji-font))
  ;; Unregister this hook once its run
  (remove-hook 'after-make-frame-functions
               'zdx/set-emoji-font-in-frame))

;; Attach the function to the hook only if in Emacs server
;; otherwise just call the config function directly
(if (daemonp)
    (add-hook 'after-make-frame-functions
              'zdx/set-emoji-font-in-frame)
  (zdx/set-emoji-font))


#+end_src

** exec-path from shell
[[https://github.com/purcell/exec-path-from-shell][This]] is a GNU Emacs library to ensure environment variables inside Emacs look the
same as in the user's shell.  This is useful when, like me, you don't really make an
effort to keep =$PATH= manipulation out of your =.zshrc=.

#+begin_src emacs-lisp :results silent
    (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config (exec-path-from-shell-initialize)
  )
#+end_src

** org-recent-headings
#+begin_src emacs-lisp :results silent
     (use-package org-recent-headings
      :straight (org-recent-headings :type git :host github :repo "alphapapa/org-recent-headings")
      :hook ((org-mode) . org-recent-headings-mode )      )
#+end_src

** smex
#+begin_src emacs-lisp :results silent
(use-package smex)
#+end_src
** rainbow-mode
#+begin_src emacs-lisp :results silent
  (use-package rainbow-mode
    :hook ((org-mode emacs-lisp-mode) . rainbow-mode))
#+end_src
** highlight-indent-guides
#+begin_src emacs-lisp :results silent
     (use-package highlight-indent-guides
      :straight (highlight-indent-guides :type git :host github :repo "DarthFennec/highlight-indent-guides")
      :hook ((python-mode emacs-lisp-mode) . highlight-indent-guides-mode)
      :config
      (setq highlight-indent-guides-method 'bitmap)
      (setq highlight-indent-guides-responsive 'stack)
      )
#+end_src
** restclient
#+begin_src emacs-lisp :results silent
        (use-package restclient
         :straight (restclient :type git :host github :repo "pashky/restclient.el")
         )
      (use-package ob-restclient
       :straight (ob-restclient :type git :host github :repo "alf/ob-restclient.el")
       )
    (use-package company-restclient
     :init
  (add-to-list 'company-backends 'company-restclient
               ))
#+end_src
** zoom-window
#+begin_src emacs-lisp :results silent
  (use-package zoom-window
   :straight (zoom-window :type git :host github :repo "emacsorphanage/zoom-window")
   :config
 (setq zoom-window-mode-line-color "medium sea green"
   ))
#+end_src

** jenkinsfile-mode
#+begin_src emacs-lisp :results silent
(use-package groovy-mode)
(use-package jenkinsfile-mode
 :straight (jenkinsfile-mode :type git :host github :repo "john2x/jenkinsfile-mode")
:after groovy-mode
 )
#+end_src

** insert-kaomoji
#+begin_src emacs-lisp :results silent
  (use-package insert-kaomoji
  :bind ("C-x 8 k" . insert-kaomoji))
#+end_src

** theme-changer
#+begin_src emacs-lisp :results silent
  ;; (use-package heaven-and-hell
  ;;   :ensure t
  ;;   :init
  ;;   (setq heaven-and-hell-theme-type 'dark) ;; Omit to use light by default
  ;;   (setq heaven-and-hell-themes
  ;;         '((light . material-light)
  ;;           (dark . solarized-wombat-dark))) ;; Themes can be the list: (dark . (tsdh-dark wombat))
  ;;   ;; Optionall, load themes without asking for confirmation.
  ;;   (setq heaven-and-hell-load-theme-no-confirm t)
  ;;   :hook (after-init . heaven-and-hell-init-hook)
  ;;   :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
  ;;          ("<f6>" . heaven-and-hell-toggle-theme)))
#+end_src

#+begin_src emacs-lisp :results silent
    ;; (defun pre-tidy-up-theme-sensitive-changes (current-theme)
    ;;   "Theme switching likes to have the previous themes cleared off."
    ;;   (disable-theme current-theme))

    ;; (defun post-tidy-up-theme-sensitive-changes (current-theme)
    ;;   "Check what color the hl-line should be."
    ;;   (org-mode-restart)
    ;;   (if (equal current-theme 'material-light)
  ;;       (set-face-background 'hl-line "ivory3")
    ;;     (set-face-background 'hl-line "gray22")))

    ;; (use-package theme-changer
    ;;   :straight (theme-changer :type git :host github :repo "mplscorwin/theme-changer")
    ;;   :init
    ;;   (setq calendar-location-name "New York, NY")
    ;;   (setq calendar-latitude 44.26)
    ;;   (setq calendar-longitude -72.57)
    ;;   (add-hook 'theme-changer-post-change-functions #'post-tidy-up-theme-sensitive-changes)
    ;;   â€‹
    ;;   :config
    ;;   (change-theme 'material-light 'solarized-wombat-dark)
    ;;   )

              ;; (Use-package theme-changer
              ;;   :straight (theme-changer :type git :host github :repo "hadronzoo/theme-changer")
              ;;   :config
              ;;   (setq calendar-location-name "New York, NY")
              ;;   (setq calendar-latitude 44.26)
              ;;   (setq calendar-longitude -72.57)
              ;;   (setq theme-changer-post-change-functions (list 'org-mode-restart 'post-tidy-up-theme-sensitive-changes))
              ;;   (setq theme-changer-pre-change-functions (list 'pre-tidy-up-theme-sensitive-changes))
              ;;   (change-theme 'material-light 'solarized-wombat-dark)
              ;;   )
#+end_src

** bongo
#+begin_src emacs-lisp :results silent
(use-package bongo)
#+end_src

** auto-dim-other-buffers

#+begin_src emacs-lisp :results silent
(use-package auto-dim-other-buffers
 :straight (auto-dim-other-buffers :type git :host github :repo "mina86/auto-dim-other-buffers.el")
 :config
 )
#+end_src

** COMMENT hyperbole
#+CAPTION:
#+begin_src emacs-lisp :results silent
(use-package hyperbole)
#+end_src

** treesitter
#+begin_src emacs-lisp :results silent
(use-package tree-sitter
  :straight (tree-sitter :type git
                         :host github
                         :repo "ubolonton/emacs-tree-sitter"
                         :files ("lisp/*.el"))
  :config (add-to-list 'tree-sitter-major-mode-language-alist '(python-mode . python))
  :hook ((python-mode ) . tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :straight (tree-sitter-langs :type git
                               :host github
                               :repo "ubolonton/emacs-tree-sitter"
                               :files ("langs/*.el" "langs/queries"))
  :after tree-sitter)
#+end_src

** helpful

#+begin_src emacs-lisp :results silent
  (use-package pretty-hydra
   :straight (pretty-hydra :type git :host github :repo "jerrypnz/major-mode-hydra.el" :files ("pretty-hydra.el"))
   :config
   )
 ;;https://github.com/Wilfred/helpful
(use-package helpful
;;  :ensure t
  :pretty-hydra
  ((:color teal :quit-key "q")
   ("Helpful"
    (("f" helpful-callable "callable")
     ("v" helpful-variable "variable")
     ("k" helpful-key "key")
     ("c" helpful-command "command")
     ("d" helpful-at-point "thing at point"))))

  :bind ("M-C-h" . helpful-hydra/body))
#+end_src

** ibuffer
#+CAPTION: Configure ibuffer
#+begin_src emacs-lisp :results silent
      (use-package ibuffer-projectile)

          (global-set-key (kbd "C-x C-b") 'ibuffer)
          (setq ibuffer-saved-filter-groups
                (quote (("default"
                         ("dired" (mode . dired-mode))
                         ("org" (or (name . "^.*org$")
                                    (name . "^\*Org")))
                         ("shell" (or
                                   (mode . eshell-mode)
                                   (mode . shell-mode)
                                   (mode . vterm-mode)))
                         ("git"    (or (name . "^\*magit")
                                       (name . "^\magit")))
                         ("programming" (or
                                         (mode . python-mode)
                                         (mode . c++-mode)
                                         (mode . makefile-gmake-mode)
                                         (mode . latex-mode)

                                         (mode . gnu-makefile-mode)))
                         ("data / configs " (or       (mode . json-mode)
                                                      (mode . yaml-mode)))
                         ("Pinboard" (or
                                      (name . "^\*Pinboard")))
                         ("emacs" (or
                                   (name . "^\\*scratch\\*$")
                                   (name . "^\\*Messages\\*$")
                                   (name . "^\\*straight-process\\*$")
                                   (name . "^\\*Calendar\\*$")
                                   (name . "^\\*lsp*\\*$")
                                   (name . "^\\*pyls*\\*$")
                                   )
                          )
                         ))))
          (add-hook 'ibuffer-mode-hook
          (lambda ()
          (ibuffer-auto-mode 1)
          (ibuffer-switch-to-saved-filter-groups "default")))

          (require 'ibuf-ext)
          ;; (add-to-list 'ibuffer-never-show-predicates "^\\*")
          ;; don't show these
          ;(add-to-list 'ibuffer-never-show-predicates "zowie")
          ;; Don't show filter groups if there are no buffers in that group
          (setq ibuffer-show-empty-filter-groups nil)

          ;; Don't ask for confirmation to delete marked buffers
          (setq ibuffer-expert t)
#+end_src


#+CAPTION: display human-readable sizes for buffers
#+begin_src emacs-lisp :results silent
(defun ajv/human-readable-file-sizes-to-bytes (string)
  "Convert a human-readable file size into bytes."
  (interactive)
  (cond
   ((string-suffix-p "G" string t)
    (* 1000000000 (string-to-number (substring string 0 (- (length string) 1)))))
   ((string-suffix-p "M" string t)
    (* 1000000 (string-to-number (substring string 0 (- (length string) 1)))))
   ((string-suffix-p "K" string t)
    (* 1000 (string-to-number (substring string 0 (- (length string) 1)))))
   (t
    (string-to-number (substring string 0 (- (length string) 1))))
   )
  )

(defun ajv/bytes-to-human-readable-file-sizes (bytes)
  "Convert number of bytes to human-readable file size."
  (interactive)
  (cond
   ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
   ((> bytes 100000000) (format "%10.0fM" (/ bytes 1000000.0)))
   ((> bytes 1000000) (format "%10.1fM" (/ bytes 1000000.0)))
   ((> bytes 100000) (format "%10.0fk" (/ bytes 1000.0)))
   ((> bytes 1000) (format "%10.1fk" (/ bytes 1000.0)))
   (t (format "%10db" bytes)))
  )

;; Use human readable Size column instead of original one
(define-ibuffer-column size-h
  (:name "Size"
         :inline t
         :summarizer
         (lambda (column-strings)
           (let ((total 0))
             (dolist (string column-strings)
               (setq total
                     ;; like, ewww ...
                     (+ (float (ajv/human-readable-file-sizes-to-bytes string))
                        total)))
             (ajv/bytes-to-human-readable-file-sizes total)))    ;; :summarizer nil
         )
  (ajv/bytes-to-human-readable-file-sizes (buffer-size)))

;; Modify the default ibuffer-formats
(setq ibuffer-formats
      '((mark modified read-only locked " "
              (name 20 20 :left :elide)
              " "
              (size-h 11 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " "
              filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))
#+end_src

#+begin_src emacs-lisp :results silent
(use-package ibuffer-vc )
#+end_src

** split window sensibly
From [[https://stackoverflow.com/questions/23659909/reverse-evaluation-order-of-split-height-threshold-and-split-width-threshold-in][SO]], this is a way to prefer vertical splits over horizontal ones depending on
window size.
#+begin_src emacs-lisp :results silent
(defun my-split-window-sensibly (&optional window)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically.
             (with-selected-window window
               (split-window-below)))
        (and (eq window (frame-root-window (window-frame window)))
             (not (window-minibuffer-p window))
             ;; If WINDOW is the only window on its frame and is not the
             ;; minibuffer window, try to split it horizontally disregarding
             ;; the value of `split-width-threshold'.
             (let ((split-width-threshold 0))
               (when (window-splittable-p window t)
                 (with-selected-window window
                   (split-window-right))))))))

(setq split-window-preferred-function 'my-split-window-sensibly)
#+end_src

** auto-revert mode
Auto-revert acts a lot more like modern editors (sublime, etc), which helps a great
deal when editing files with potentially many editors at once.

#+begin_src emacs-lisp :results silent
(global-auto-revert-mode t)
#+end_src

** display line numbers
Line numbers are good.
#+begin_src emacs-lisp :results silent
    (global-display-line-numbers-mode)
  ;;  (setq display-line-numbers 'relative)
    (setq-default display-line-numbers-width 4)
#+end_src

** diff-hl
diff-hl is a "git gutter": it hilights changed lines on the left hand side of a buffer.
#+begin_src emacs-lisp :results silent
(use-package diff-hl
 :straight (diff-hl :type git
               :host github
               :repo "dgutov/diff-hl")
 :config (global-diff-hl-mode))
#+end_src

** webpaste
#+begin_src emacs-lisp :results silent
(use-package webpaste
  :bind (("C-c C-p C-b" . webpaste-paste-buffer)
         ("C-c C-p C-r" . webpaste-paste-region))
  :config
  (progn
    (setq webpaste-provider-priority '("bpa.st" "dpaste.org" "dpaste.com")))
    (setq webpaste-paste-confirmation t)
)
#+end_src

** hl-todo
nominally hilight lines that have todo in them
#+begin_src emacs-lisp :results silent
  (use-package hl-todo
   :straight (hl-todo :type git
                 :host github
                 :repo "tarsius/hl-todo")
   :init  (setq hl-todo-exclude-modes '(list org-mode))
   :config
         (global-hl-todo-mode)
         (setq hl-todo-keyword-faces
               '(("todo.*"   . "#FF0000")
                 ("fixme.*"  . "#FF0000"))
         )
         )
#+end_src

** Highlight row, column marker
Hilight the row the mark is on.
#+begin_src emacs-lisp :results silent
    (global-hl-line-mode)
    (set-face-background 'hl-line "gray22")
#+end_src

#+begin_src emacs-lisp :results silent
    (add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
    (add-hook 'org-mode-hook #'display-fill-column-indicator-mode)
    (set-face-foreground 'fill-column-indicator "gray22")
    (setq display-fill-column-indicator-character "|")
#+end_src

** control font size with mouse
This is a complete hack, because these don't affect all faces properly, but it's
better than nothing.
#+begin_src emacs-lisp :results silent
  (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
  (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)
#+end_src

** pinboard
Manage pinboard pins with [[https://github.com/davep/pinboard.el][pinboard.el]].
#+begin_src emacs-lisp :results silent
    (use-package pinboard
     :straight (pinboard :type git
                   :host github
                   :repo "davep/pinboard.el")
     :config (add-to-list 'auth-sources "~/.authinfo" t)
         )
  ;;https://gist.github.com/khinsen/7ed357eed9b27f142e4fa6f5c4ad45dd
(require 'org)

(defun org-pinboard-store-link ()
  "Store a link taken from a pinboard buffer."
  (when (eq major-mode 'pinboard-mode)
    (pinboard-with-current-pin pin
      (org-store-link-props
       :type "pinboard"
       :link (alist-get 'href pin)
       :description (alist-get 'description pin)))))

(org-link-set-parameters "pinboard"
                         :follow #'browse-url
                         :store #'org-pinboard-store-link)
#+end_src

** powerline
Add fancy modeline, because why not.
#+begin_src emacs-lisp :results silent
  (use-package powerline
   :straight (powerline :type git
                 :host github
                 :repo "milkypostman/powerline")
   :config (powerline-default-theme)
   )
#+end_src

** hippie-expand

#+begin_src emacs-lisp :results silent

          (global-set-key (kbd "M-/") 'hippie-expand)
          (setq hippie-expand-try-functions-list
                        '(try-expand-dabbrev
                        try-expand-dabbrev-all-buffers
                        try-expand-dabbrev-from-kill
                        try-complete-file-name-partially
                        try-complete-file-name try-expand-all-abbrevs
                        try-expand-list try-expand-line
                        try-complete-lisp-symbol-partially
                        try-complete-lisp-symbol))
#+end_src

** elpher
#+begin_src emacs-lisp :results silent
  (use-package elpher
   :straight (elpher :type git
                 :repo "git://thelambdalab.xyz/elpher")
   :config
       )
#+end_src

** winner
[[https://www.emacswiki.org/emacs/WinnerMode][winner mode]]
#+begin_src emacs-lisp :results silent
  (winner-mode t)
#+end_src

** pdf-tools
#+begin_src emacs-lisp :results silent
    (use-package pdf-tools
      :mode ("\\.pdf$" . pdf-view-mode)
      :config
      (pdf-tools-install)
      (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
#+end_src
** crux
#+begin_src emacs-lisp :results silent
   (use-package crux
    :straight (crux :type git
                  :host github
                  :repo "bbatsov/crux")
    :config
  (global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
;;  (global-set-key (kbd "C-c S") #'crux-find-shell-init-file)
        )
#+end_src
** transient-dwim

#+begin_src emacs-lisp :results silent
  (use-package transient-dwim
   :straight (transient-dwim :type git
                 :host github
                 :repo "conao3/transient-dwim.el")
   :bind ("M-?" . transient-dwim-dispatch)
   )
#+end_src
** dired-sidebar
#+begin_src emacs-lisp :results silent
      (use-package dired-sidebar
       :straight (dired-sidebar :type git :host github :repo "jojojames/dired-sidebar")
      :commands (dired-sidebar-toggle-sidebar)
       )
    (use-package ibuffer-sidebar
     :straight (ibuffer-sidebar :type git :host github :repo "jojojames/ibuffer-sidebar")
       :commands (ibuffer-sidebar-toggle-sidebar) )
  (defun +sidebar-toggle ()
    "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
    (interactive)
    (dired-sidebar-toggle-sidebar)
    (ibuffer-sidebar-toggle-sidebar))
#+end_src

** dired-hacks
#+begin_src emacs-lisp :results silent
  (defun grym-dired-filter-group-mode-off ()
    (interactive)
    (dired-filter-group-mode -1))
  (defun grym-dired-filter-group-mode-on ()
    (interactive)
    (dired-filter-group-mode 1))

  (use-package dired-hacks-utils)
  (use-package dired-open
    :bind (:map dired-mode-map
                ("O" . dired-open-xdg)))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove))
    )

  (use-package dired-filter
    :after    dired
    :bind (:map dired-mode-map
                ("h" . dired-filter-by-dot-files)
                ("/" . dired-filter-map)
                ("f" . grym-dired-filter-group-mode-off)
                )
    :hook ((dired-mode . dired-filter-mode)
           (dired-mode . dired-filter-group-mode)
           (dired-mode . dired-filter-by-dot-files)
           )
    :init (setq dired-filter-revert 'never
                dired-filter-group-saved-groups
                '(("default"
                   ("Git"
                    (directory . ".git")
                    (file . ".gitignore")
                    (file . ".gitattributes"))
                   ("Directory"
                    (directory))
                   ("PDF"
                    (extension . "pdf"))
                   ("LaTeX"
                    (extension "tex" "bib" "cls" "sty"))
                   ("Source"
                    (extension "c" "cpp" "hs" "rb" "m" "r" "cs" "el" "lisp" "html" "js" "css"))
                   ("Python"
                    (extension "py" "pyx" "pyc" "whl" "ipynb"))
                   ("Documents"
                    (extension "md" "rst" "txt" "docx" "pptx" "xlsx"))
                   ("Data"
                    (extension "yaml" "toml" "cfg" "json" "xml" "ini" "csv"))
                   ("Packages"
                    (extension "deb" "rpm" "dmg" "iso"))
                   ("Org"
                    (extension . "org"))
                   ("Archives"
                    (extension "zip" "rar" "gz" "bz2" "tar" "tgz"))
                   ("Videos"
                    (extension "mp4" "webm" "mkv" "mov" "avi" "m3u8"))
                   ("Audio"
                    (extension "m4a" "aac" "wav" "mp3" "ogg"))
                   ("Images"
                    (extension "jpg" "JPG" "webp" "png" "PNG" "jpeg" "JPEG" "bmp" "BMP" "TIFF" "tiff" "gif" "GIF" "svg" "HEIC" "heic"))))))


  (when (executable-find "avfsd")
    (use-package dired-avfs))

  (use-package dired-rainbow
    :after dired
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html        "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml         "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document    "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown    "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database    "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media       "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac" "webm" "mkv" "m4a"))
    (dired-rainbow-define image       "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg" "webp" "JPG" "HEIC" "heic"))
    (dired-rainbow-define log         "#c17d11" ("log"))
    (dired-rainbow-define shell       "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled    "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable  "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed  "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar" "whl" "pt" "pth"))
    (dired-rainbow-define packaged    "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted   "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts       "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition   "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc          "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-narrow
    :after    dired
    :bind (:map dired-mode-map
                ("\\" . dired-narrow) ;; g reverts
                ;; ("<down>"  . dired-narrow-next-file)
                ;; ("<up>"    . dired-narrow-previous-file)
                ;; ("<right>" . dired-narrow-enter-directory)
                ))
  (use-package dired-collapse
    :hook 'dired-mode-hook)
  ;;preview files in dired
  ;; (use-package peep-dired
  ;; :after dired
  ;;   :bind (:map dired-mode-map
  ;;               ("P" . peep-dired))
  ;;   :config (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4"))
  ;;   (setq peep-dired-cleanup-on-disable t)
  ;;   (setq peep-dired-cleanup-eagerly t)
  ;;   (setq peep-dired-enable-on-directories t)
  ;;   )
#+end_src

#+RESULTS:
| dired-collapse |

*** dired-quick-sort
#+begin_src emacs-lisp :results silent
  (use-package dired-quick-sort
   :straight (dired-quick-sort :type git :host gitlab :repo "xuhdev/dired-quick-sort")
   :config
 (dired-quick-sort-setup)
   )
#+end_src


** diranged
#+begin_src emacs-lisp :results silent
(use-package diranged
 :straight (diranged :type git :host github :repo "tslight/diranged")
:bind (:map dired-mode-map ("P" . diranged-mode))
 )
#+end_src

** screenshot
from [[https://old.reddit.com/r/emacs/comments/idz35e/emacs_27_can_take_svg_screenshots_of_itself/g2c2c6y/][alphapapa]]:
#+begin_src emacs-lisp :results silent
(defun screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (let* ((filename (make-temp-file "Emacs" nil ".svg"))
         (data (x-export-frames nil 'svg)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename)))
#+end_src

** vterm
#+begin_src emacs-lisp :results silent
  (use-package vterm
       :straight (vterm :type git
                     :host github
                     :repo "akermu/emacs-libvterm")
       :bind ("C-c v" . vterm-other-window)
       :init (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
       )
#+end_src

** burly
#+begin_src emacs-lisp :results silent
(use-package burly
 :straight (burly :type git :host github :repo "alphapapa/burly.el")
 :config
 )
#+end_src

** unfill
#+begin_src emacs-lisp :results silent
(use-package unfill
 :straight (unfill :type git :host github :repo "purcell/unfill")
 :config
 )
#+end_src

* projectile
[[https://github.com/bbatsov/projectile][projectile]] is a project interaction library for emacs.

#+INCLUDE: "../nougat/packages/projectile/setup.org"

Override default project directory path.
#+begin_src emacs-lisp :results silent
  (setq projectile-project-search-path (list (expand-file-name "~/Projects/")
                                             (expand-file-name "~/lab-notebook")
                                             (expand-file-name (concat user-emacs-directory "emacs-nougat"))))
#+end_src

#+INCLUDE: "../nougat/packages/projectile/discover-projects.org"
* org-mode customizations
[[https://orgmode.org][org]] is life.
#+INCLUDE: "../nougat/packages/org-mode/setup.org::look"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::feel"

#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::add languages to babel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::set default header args"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::disable code evaluation prompts"

#+INCLUDE: "../nougat/packages/org-mode/extras/org-tidy.org"

#+INCLUDE: "../nougat/packages/org-mode/extras/nested-narrowing.org"

#+INCLUDE: "../nougat/packages/org-mode/extras/org-export.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/htmlize.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/toc-org.org"
##+INCLUDE: "../nougat/packages/org-mode/extras/ox-jira.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-gfm.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-beamer.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-avy.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-projectile.org"
##+INCLUDE: "../nougat/packages/org-mode/extras/org-roam.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-download.org"
#+include: "../nougat/packages/org-mode/extras/ox-hugo.org"
** strikethrough-done
Render org TODO states in the DONE category with struck-through text with a handy
color scheme.
#+begin_src emacs-lisp :results silent
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "DeepSkyBlue"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))
#+end_src

** org-refile
from [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][here]]

#+begin_src emacs-lisp :results silent
(setq org-agenda-files (list my/org-path-name))
(setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

*** refile with links (broken)
From [[https://gist.github.com/samspills/895c29a1c0f6bf2e66c23149bfcc0f38][this gist]], set things up so that org-refile leaves a backlink behind.  This is
useful to me for my note style right now (as of <2020-07-08 Wed> because i usually
want to have a per-date work log tree, but move todos off where they belong under a
project.)

#+begin_src emacs-lisp :results silent
  ;; (setq org-id-link-to-org-use-id t)

  ;; (defun org-refile--insert-link ( &rest _ )
  ;;     (org-back-to-heading)
  ;;     (let* ((refile-region-marker (point-marker))
  ;;            (source-link (org-store-link nil)))
  ;;     (org-insert-heading)
  ;;     (insert source-link)
  ;;     (goto-char refile-region-marker)))

  ;; (advice-add 'org-refile
  ;;             :before
  ;;             #'org-refile--insert-link)
#+end_src

** org-fragtog
[[https://github.com/io12/org-fragtog][from]] here:
#+begin_src emacs-lisp :results silent
  (use-package org-fragtog
   :straight (org-fragtog :type git
                 :host github
                 :repo "io12/org-fragtog")
       )
(add-hook 'org-mode-hook 'org-fragtog-mode)

#+end_src

** org-ref

#+begin_src emacs-lisp :results silent
  ;; (use-package org-ref
  ;;  :straight (org-ref :type git
  ;;                :host github
  ;;                :repo "jkitchin/org-ref")
  ;;  :config
  ;;  (setq reftex-default-bibliography bibtex-completion-bibliography
  ;;        org-ref-default-bibliography bibtex-completion-bibliography)

  ;;      )
#+end_src

* ivy
https://github.com/abo-abo/swiper
#+begin_quote
flexible, simple tools for minibuffer completion in Emacs

This repository contains:

Ivy, a generic completion mechanism for Emacs.

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

Swiper, an Ivy-enhanced alternative to isearch.
#+end_quote
#+INCLUDE: "../nougat/packages/ivy/ivy.org"

* yasnippet
YASnippet extends org-mode's =<s=-like templating in an arbitrary way.  This is useful
for quickly applying export settings, annotating code blocks, and the like.
#+INCLUDE: "../nougat/packages/yasnippet/yasnippet.org"
* git
#+INCLUDE: "../nougat/packages/gitignore/gitignore.org"
#+INCLUDE: "../nougat/packages/magit/setup.org"
** github
*** gist
#+INCLUDE: "../nougat/packages/github/gist.org"
* pandoc mode
#+INCLUDE: "../nougat/packages/pandoc-mode/pandoc-mode.org"
* language support
** lsp-mode
LSP is the language server protocol

#+begin_src emacs-lisp :results silent
(use-package lsp-mode
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  :init (setq lsp-keymap-prefix "s-l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
;; if you are helm user
;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src
** format-all-the-code
#+begin_src emacs-lisp :results silent
(use-package format-all
 :straight (format-all :type git :host github :repo "lassik/emacs-format-all-the-code")
 )
#+end_src
** COMMENT CSV
#+INCLUDE: "../nougat/packages/csv-mode/csv-mode.org"
** LaTeX
#+INCLUDE: "../nougat/support/latex/latex.org"
** lisp
#+INCLUDE: "../nougat/support/lisp/lispy-mode.org"
*** aggressive-indent mode
#+begin_src emacs-lisp :results silent
  (use-package aggressive-indent
    :hook ((emacs-lisp-mode) . aggressive-indent-mode)
    )
#+end_src

*** racket
#+begin_src emacs-lisp :results silent
  (use-package racket-mode
   :config (setq tab-always-indent 'complete))
#+end_src


** yaml
#+CAPTION:
#+begin_src emacs-lisp :results silent
   (use-package yaml-mode
    :straight (yaml-mode :type git :host github :repo "yoshiki/yaml-mode")
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    )
     (add-hook 'yaml-mode-hook
       '(lambda ()
         (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+end_src

** python
*** black
#+CAPTION: blacken lets you auto-blackify your python code
#+begin_src emacs-lisp :results silent
  ;;https://github.com/pythonic-emacs/blacken
  (use-package blacken
    :straight (blacken :type git :host github :repo "pythonic-emacs/blacken")
    :init (blacken-mode)
    :hook (python-mode . blacken-mode)
    :config     (setq blacken-only-if-project-is-blackened t))
#+end_src

*** pyvenv
#+begin_src emacs-lisp :results silent
(use-package pyvenv
 :straight (pyvenv :type git
               :host github
               :repo "jorgenschaefer/pyvenv")
)
#+end_src

*** poetry
#+CAPTION: poetry https://github.com/galaunay/poetry.el
#+begin_src emacs-lisp :results silent
(use-package poetry
:straight (poetry :type git
                  :host github
                  :repo "galaunay/poetry.el")
;; :config (poetry-tracking-mode)
)
#+end_src

** markdown
#+INCLUDE: "../nougat/support/markdown/markdown-mode.org"
*** markdown-toc
#+begin_src emacs-lisp :results silent
(use-package markdown-toc)
#+end_src

** json

#+begin_src emacs-lisp :results silent
  (use-package json-mode
    :straight (json-mode :type git
                         :host github
                         :repo "joshwnj/json-mode")
    :bind-keymap ("C-c C-f" . json-pretty-print-buffer)
    )
#+end_src

** docker
#+INCLUDE: "../nougat/support/docker/dockerfile-mode.org"

*** docker

#+begin_src emacs-lisp :results silent
(use-package docker
 :straight (docker :type git
               :host github
               :repo "Silex/docker.el")
 :bind ("C-c d" . docker)
     )
#+end_src

** direnv
#+INCLUDE: "../nougat/support/direnv/direnv.org"

* hydras
#+INCLUDE: "../nougat/packages/hydra/setup.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-hera.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-org.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-projectile.org"
** window-hydra
From [[https://github.com/dsedivec/dot-emacs-d/blob/master/lisp/window-hydra.el][here]]
#+begin_src emacs-lisp :results silent
  (use-package windmove)
  (use-package transpose-frame)
  (use-package ace-window
    :bind* (("C-<tab>" . ace-window)))

  (require 'windmove)
  (require 'ace-window)
  (pretty-hydra-define window-hydra (:title "Navigation" :color teal :quit-key "<XF86Launch9>")
    ("Move window"
     (    ("I" windmove-swap-states-up "up" )
          ("J" windmove-swap-states-left "left" )
          ("L" windmove-swap-states-down "down" )
          ("K" windmove-swap-states-right "right" )
          )
     "Move focus"
     (    ("i" windmove-up "up" )
          ("j" windmove-left "left" )
          ("k" windmove-down "down" )
          ("l" windmove-right "right" )
          )
     "Modify"
     (
      ("c" clone-indirect-buffer-other-window "clone indirect")
      ("C" clone-indirect-buffer "clone")
      ("0" delete-window "delete this window")
      ("1" delete-other-windows "delete other windows")
      ("2" split-window-below "split below")
      ("3" split-window-right "split right")
      ("w" ace-swap-window "swap window")
      ("j" zoom-window-zoom "zoom")
      )
     "winner-mode"
     (
      ("<right>" winner-redo "redo")
      ("<left>" winner-undo "undo")
      )
     "transpose-mode"
     (
      ("t" transpose-frame "transpose x/y")
      ("v" flip-frame "flip vertically")
      ("h" flop-frame "flip horizontally")
      ("8" rotate-frame "rotate 180")
      ("r" rotate-frame-clockwise "rotate clockwise")
      ("R" rotate-frame-anticlockwise "rotate anticlockwise")
      )
     "Visual styling"
     (("t" display-fill-column-indicator-mode "column marker")
      ("s" +sidebar-toggle "toggle sidebars"))
     ))
  (global-set-key (kbd "<XF86Launch9>") 'window-hydra/body)
#+end_src

** COMMENT Other hydras

#+INCLUDE: "../nougat/packages/hydra/extras/hydra-bookmarks.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-elisp.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-helm.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-help.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-mark.org"


#+INCLUDE: "../nougat/packages/hydra/extras/hydra-python.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-register.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-window.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-yank-pop.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-zoom.org"
