:display-options:
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+language: en
#+startup: overview indent align content
#+babel: :cache no
#+options: ^:nil num:nil tags:nil toc:nil* OS-specific

#+title: Emacs config, org-mode style.
#+author: grym
#+description: A literate programming-style exposition of my Emacs configuration
:end:
This is the current version of my emacs configuration.  It is rendered to a
byte-compiled =init.el= by way of a slightly kludgey bash script.

Commented-out org-mode headings are neither shown here nor present in the tangled
resulting elisp, but they are present in [[https://github.com/gvoysey/emacs.d][the repo]] that houses this document.

#+INCLUDE: "./base.org"
* os-specific configurations
Some things only need to be tweaked for certain OSes, and happen early -- in this
case, before the package manager is initialized.
** mac os
*** Disable ⌘-q
Accidentally closing your editor window when you don't mean to just sucks.
#+begin_src emacs-lisp
(global-unset-key (kbd "s-q"))
#+end_src

** linux
*** Disable doc-view-mode defaults for pdf files
I prefer side-by-side pdf viewers over the in-emacs option for rendering PDFs.  This
forces it.
#+begin_src emacs-lisp
(defun ensc/mailcap-mime-data-filter (filter)
  ""
  (mapcar (lambda(major)
        (append (list (car major))
            (remove nil
                (mapcar (lambda(minor)
                      (when (funcall filter (car major) (car minor) (cdr minor))
                    minor))
                    (cdr major)))))
      mailcap-mime-data))

(defun ensc/no-pdf-doc-view-filter (major minor spec)
  (if (and (string= major "application")
       (string= minor "pdf")
       (member '(viewer . doc-view-mode) spec))
      nil
    t))

(eval-after-load 'mailcap
  '(progn
     (setq mailcap-mime-data
       (ensc/mailcap-mime-data-filter 'ensc/no-pdf-doc-view-filter))))
#+end_src

* boilerplate
Set up some variables pointing to where normal lab notebook things live.
** my/org-path-name
Part of this configuration's purpose is to use emacs as a digital lab notebook.
#+begin_src emacs-lisp
  (defvar my/org-path-name (expand-file-name "~/lab-notebook/"))
#+end_src

** my/org-file-name
#+begin_src emacs-lisp
  (defun my/make-org-file-name (file-name)
    (concat my/org-path-name file-name))
#+end_src

** my/notes-file-name
#+begin_src emacs-lisp
  (defvar my/notes-file-name (my/make-org-file-name "notes.org"))
#+end_src

** my/template-directory
#+begin_src emacs-lisp
  (defvar my/template-directory (concat my/org-path-name "templates"))
#+end_src

** my/make-template-file-name
#+begin_src emacs-lisp
  (defun my/make-template-file-name (file-name)
    (concat my/template-directory file-name))
#+end_src

* themes
Emacs has many themes that it can use.  One set of them are configured here.
** solarized-theme
Solarized is a nice theme.  Easy on the eyes.  The problem with themes is that I like
to use emacsclient as ~exec emacsclient -c -a="" "$@" & > /dev/null~, but if you do
this, the theme comes out all weird the first time because emacs doesn't know if it
has a GUI or not, so it reverts to a halfassed guess of what terminal colors it might
have available to it.

The solution is to delay theme load for a few seconds until the GUI comes up and then
it works fine. [[https://old.reddit.com/r/emacs/comments/3a5kim/emacsclient_does_not_respect_themefont_setting/cs9roe4/][this]] reddit post lead to [[https://github.com/kaushalmodi/.emacs.d/blob/f3c44e933f45dfdb760540e9f86acc91b55ab94a/init.el#L293-L304][this]] solution.
#+begin_src emacs-lisp
  (use-package solarized-theme

   :straight (solarized-theme :type git
                              :host github
                              :repo "bbatsov/solarized-emacs")
   :config
   (load-theme 'solarized-wombat-dark t)
   :defer 1
  )
#+end_src
** material-theme

#+begin_src emacs-lisp
     (use-package material-theme
      :straight (emacs-material-theme :type git
                    :host github
                    :repo "cpaulik/emacs-material-theme")
          )
#+end_src

* emacs
Configuration related core editor functions are here.
#+INCLUDE: "../nougat/emacs/fonts.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/autosaves.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/backups.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/cursor.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/disable.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/editing.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/key-bindings.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/minor-modes.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/modeline.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/undo-tree.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/diff-kill.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/flycheck.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/neotree.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/dired.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/popwin.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/ws-butler.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/avy.org" :minlevel 2

** exec-path from shell
[[https://github.com/purcell/exec-path-from-shell][This]] is a GNU Emacs library to ensure environment variables inside Emacs look the
same as in the user's shell.  This is useful when, like me, you don't really make an
effort to keep =$PATH= manipulation out of your =.zshrc=.

#+begin_src emacs-lisp
    (use-package exec-path-from-shell
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    :config (exec-path-from-shell-initialize)
  )
#+end_src

** COMMENT sr-speedbar
#+include: "../nougat/emacs/srspeedbar.org"

#+begin_src emacs-lisp
(setq speedbar-initial-expansion-list-name "quick buffers")
(global-set-key (kbd "M-1") 'sr-speedbar-toggle)
#+end_src

** COMMENT buffer-move
#+CAPTION: Move buffers around more easily
#+begin_src emacs-lisp
  (use-package buffer-move
  :straight(buffer-move
  :type git
  :host github
  :repo "lukhas/buffer-move"))

  ;; ((global-set-key (kbd "<C-S-up>")     'buf-move-up)
  ;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  ;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  ;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)
  ;; ;;(setq buffer-move-stay-after-swap t)
  ;; ;;(setq buffer-move-behavior 'move)
  ;; )
#+end_src

** split window sensibly
From [[https://stackoverflow.com/questions/23659909/reverse-evaluation-order-of-split-height-threshold-and-split-width-threshold-in][SO]], this is a way to prefer vertical splits over horizontal ones depending on
window size.
#+begin_src emacs-lisp
(defun my-split-window-sensibly (&optional window)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically.
             (with-selected-window window
               (split-window-below)))
        (and (eq window (frame-root-window (window-frame window)))
             (not (window-minibuffer-p window))
             ;; If WINDOW is the only window on its frame and is not the
             ;; minibuffer window, try to split it horizontally disregarding
             ;; the value of `split-width-threshold'.
             (let ((split-width-threshold 0))
               (when (window-splittable-p window t)
                 (with-selected-window window
                   (split-window-right))))))))

(setq split-window-preferred-function 'my-split-window-sensibly)
#+end_src

** auto-revert mode
Auto-revert acts a lot more like modern editors (sublime, etc), which helps a great
deal when editing files with potentially many editors at once.

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** display line numbers
Line numbers are good.
#+begin_src emacs-lisp
    (global-display-line-numbers-mode)
  ;;  (setq display-line-numbers 'relative)
    (setq-default display-line-numbers-width 4)
#+end_src

** COMMENT dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] is a pretty cute splash screen mode for emacs that's a nice way to jump
between projects.
#+begin_src emacs-lisp
  (use-package dashboard
    :straight (dashboard :type git
                         :host github
                         :repo "emacs-dashboard/emacs-dashboard")
    :config
    (when (display-graphic-p) (dashboard-setup-startup-hook)))

    (when (display-graphic-p)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-center-content t)
      (setq dashboard-items '((recents  . 5)
                              (bookmarks . 5)
                              (projects . 5)
                              (agenda . 5)
                              ;;                        (registers . 5)
                              ))
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-navigator t)
      (setq dashboard-set-footer nil))
#+end_src

** COMMENT awesome-tabs
Emacs can have tabs! [[https://github.com/manateelazycat/awesome-tab][awesome tab]] provides them.
#+begin_src emacs-lisp
(use-package awesome-tab
  :straight (awesome-tab :type git
                         :host github
                         :repo "manateelazycat/awesome-tab")
  :config
  (when (display-graphic-p) (awesome-tab-mode t))
)
#+end_src

** diff-hl
diff-hl is a "git gutter": it hilights changed lines on the left hand side of a buffer.
#+begin_src emacs-lisp
(use-package diff-hl
 :straight (diff-hl :type git
               :host github
               :repo "dgutov/diff-hl")
 :config (global-diff-hl-mode))
#+end_src

** shift-tab
Sometimes it's handy to go back exactly a tab width.

#+begin_src emacs-lisp
(global-set-key (kbd "<S-tab>") 'un-indent-by-tab-width)
(defun un-indent-by-tab-width ()
  "remove 4 spaces from beginning of of line"
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (concat "^" (make-string tab-width ?\ ))
        (replace-match "")))))

#+end_src

** webpaste
#+begin_src emacs-lisp
(use-package webpaste
  :bind (("C-c C-p C-b" . webpaste-paste-buffer)
         ("C-c C-p C-r" . webpaste-paste-region))
  :config
  (progn
    (setq webpaste-provider-priority '("dpaste.org" "dpaste.com")))
    (setq webpaste-paste-confirmation t)
)
#+end_src

** hl-todo
nominally hilight lines that have todo in them
#+begin_src emacs-lisp
  (use-package hl-todo
   :straight (hl-todo :type git
                 :host github
                 :repo "tarsius/hl-todo")
   :init  (setq hl-todo-exclude-modes nil)
   :config
         (global-hl-todo-mode)
         (setq hl-todo-keyword-faces
               '(("todo"   . "#FF0000")
                 ("fixme"  . "#FF0000"))
         )
  )
#+end_src

** COMMENT centered-cursor
From [[https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs][centered-cursor in vanilla emacs]], ape centered cursor mode with some speedups
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position t
      scroll-conservatively 0
      maximum-scroll-margin 0.5
      scroll-margin 99999)
#+end_src

** Highlight row
Hilight the row the mark is on.
#+begin_src emacs-lisp
(global-hl-line-mode)
(set-face-background 'hl-line "gray22")
#+end_src

** control font size with mouse
This is a complete hack, because these don't affect all faces properly, but it's
better than nothing.
#+begin_src emacs-lisp
  (global-set-key (kbd "<C-mouse-4>") 'text-scale-increase)
  (global-set-key (kbd "<C-mouse-5>") 'text-scale-decrease)
#+end_src

** pinboard
Manage pinboard pins with [[https://github.com/davep/pinboard.el][pinboard.el]].
#+begin_src emacs-lisp
    (use-package pinboard
     :straight (pinboard :type git
                   :host github
                   :repo "davep/pinboard.el")
     :config (add-to-list 'auth-sources "~/.authinfo" t)
         )
  ;;https://gist.github.com/khinsen/7ed357eed9b27f142e4fa6f5c4ad45dd
(require 'org)

(defun org-pinboard-store-link ()
  "Store a link taken from a pinboard buffer."
  (when (eq major-mode 'pinboard-mode)
    (pinboard-with-current-pin pin
      (org-store-link-props
       :type "pinboard"
       :link (alist-get 'href pin)
       :description (alist-get 'description pin)))))

(org-link-set-parameters "pinboard"
                         :follow #'browse-url
                         :store #'org-pinboard-store-link)
#+end_src

** powerline
Add fancy modeline, because why not.
#+begin_src emacs-lisp
  (use-package powerline
   :straight (powerline :type git
                 :host github
                 :repo "milkypostman/powerline")
   :config (powerline-default-theme)
   )
#+end_src

** hippie-expand

#+begin_src emacs-lisp

          (global-set-key (kbd "M-/") 'hippie-expand)
          (setq hippie-expand-try-functions-list
                        '(try-expand-dabbrev
                        try-expand-dabbrev-all-buffers
                        try-expand-dabbrev-from-kill
                        try-complete-file-name-partially
                        try-complete-file-name try-expand-all-abbrevs
                        try-expand-list try-expand-line
                        try-complete-lisp-symbol-partially
                        try-complete-lisp-symbol))
#+end_src

** elpher
#+begin_src emacs-lisp
  (use-package elpher
   :straight (elpher :type git
                 :repo "git://thelambdalab.xyz/elpher")
   :config
       )
#+end_src

** COMMENT perspective
#+begin_src emacs-lisp
(use-package perspective
  :config
  (persp-mode))
#+end_src

** COMMENT eyebrowse
[[https://depp.brause.cc/eyebrowse/][eyebrowse]]
#+begin_src emacs-lisp
(use-package eyebrowse
 :init (setq eyebrowse-keymap-prefix (kbd"C-x e"))
 :config
 (eyebrowse-mode t)
 (setq eyebrowse-wrap-around t)
 (setq eyebrowse-switch-back-and-forth t)
     )
#+end_src

** winner
[[https://www.emacswiki.org/emacs/WinnerMode][winner mode]]
#+begin_src emacs-lisp
  (winner-mode t)
#+end_src

** pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools)
#+end_src
** crux
#+begin_src emacs-lisp
   (use-package crux
    :straight (crux :type git
                  :host github
                  :repo "bbatsov/crux")
    :config
  (global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
  (global-set-key (kbd "C-c S") #'crux-find-shell-init-file)
        )
#+end_src
** transient-dwim

#+begin_src emacs-lisp
  (use-package transient-dwim
   :straight (transient-dwim :type git
                 :host github
                 :repo "conao3/transient-dwim.el")
   :bind ("M-?" . transient-dwim-dispatch)
   )
#+end_src
** dired-hacks
#+begin_src emacs-lisp
  (defun grym-dired-filter-group-mode-off ()
    (interactive)
    (dired-filter-group-mode -1))
  (defun grym-dired-filter-group-mode-on ()
    (interactive)
    (dired-filter-group-mode 1))

  (use-package dired-hacks-utils)
  (use-package dired-open
    :bind (:map dired-mode-map
                ("O" . dired-open-xdg)))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove))
    )

  (use-package dired-filter
    :after    dired
    :bind (:map dired-mode-map
                ("/" . dired-filter-map)
                ("f" . grym-dired-filter-group-mode-off)
                ("h" . dired-filter-by-dot-files)
                ("H" . dired-filter-pop-all)
                )
    :hook ((dired-mode . dired-filter-mode)
           (dired-mode . dired-filter-group-mode)
           )
    :init (setq dired-filter-revert 'never
                dired-filter-group-saved-groups
                '(("default"
                   ("Git"
                    (directory . ".git")
                    (file . ".gitignore")
                    (file . ".gitattributes"))
                   ("Directory"
                    (directory))
                   ("PDF"
                    (extension . "pdf"))
                   ("LaTeX"
                    (extension "tex" "bib" "cls" "sty"))
                   ("Source"
                    (extension "c" "cpp" "hs" "rb" "m" "r" "cs" "el" "lisp" "html" "js" "css"))
                   ("Python"
                    (extension "py" "pyx" "pyc" "whl" "ipynb"))
                   ("Documents"
                    (extension "md" "rst" "txt" "docx" "pptx" "xlsx"))
                   ("Text Data"
                    (extension "yaml" "toml" "cfg" "json"))
                   ("Packages"
                    (extension "deb" "rpm" "dmg" "iso"))
                   ("Org"
                    (extension . "org"))
                   ("Archives"
                    (extension "zip" "rar" "gz" "bz2" "tar"))
                   ("Videos"
                    (extension "mp4" "webm" "mkv" "mov" "avi"))
                   ("Audio"
                    (extension "m4a" "aac" "wav" "mp3" "ogg"))
                   ("Images"
                    (extension "jpg" "JPG" "webp" "png" "PNG" "jpeg" "JPEG" "bmp" "BMP" "TIFF" "tiff" "gif" "GIF" "svg"))))))

  (when (executable-find "avfsd")
    (use-package dired-avfs))

  (use-package dired-rainbow
    :after dired
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html        "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml         "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document    "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown    "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database    "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media       "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac" "webm" "mkv"))
    (dired-rainbow-define image       "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg" "webp"))
    (dired-rainbow-define log         "#c17d11" ("log"))
    (dired-rainbow-define shell       "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled    "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable  "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed  "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar" "whl" "pt" "pth"))
    (dired-rainbow-define packaged    "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted   "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts       "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition   "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc          "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

  (use-package dired-narrow
    :after    dired
    :bind (:map dired-mode-map
                ("\\" . dired-narrow)
                ("<down>"  . dired-narrow-next-file)
                ("<up>"    . dired-narrow-previous-file)
                ("<right>" . dired-narrow-enter-directory)))
  (use-package dired-collapse
    :hook 'dired-mode-hook)
  ;;preview files in dired
  (use-package peep-dired
  :after dired
    :bind (:map dired-mode-map
                ("P" . peep-dired))
    :config (setq peep-dired-ignored-extensions '("mkv" "iso" "mp4"))
    (setq peep-dired-cleanup-on-disable t))
#+end_src

** COMMENT polymode

#+begin_src emacs-lisp
  (use-package poly-org
  :ensure t
       )
#+end_src

** screenshot
from [[https://old.reddit.com/r/emacs/comments/idz35e/emacs_27_can_take_svg_screenshots_of_itself/g2c2c6y/][alphapapa]]:
#+begin_src emacs-lisp
(defun screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
Saves to a temp file and puts the filename in the kill ring."
  (interactive)
  (let* ((filename (make-temp-file "Emacs" nil ".svg"))
         (data (x-export-frames nil 'svg)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename)))
#+end_src

** vterm

#+begin_src emacs-lisp
   (use-package vterm
        :straight (vterm :type git
                      :host github
                      :repo "akermu/emacs-libvterm")
        :bind ("C-c v" . vterm-other-window)
    ;;    :hook ((vterm-mode . (lambda () (interactive) (display-line-numbers-mode "toggle"))))
            )
#+end_src



* projectile
[[https://github.com/bbatsov/projectile][projectile]] is a project interaction library for emacs.

#+INCLUDE: "../nougat/packages/projectile/setup.org"

Override default project directory path.
#+begin_src emacs-lisp
  (setq projectile-project-search-path (list (expand-file-name "~/Projects/")
                                             (expand-file-name "~/lab-notebook")
                                             (expand-file-name (concat user-emacs-directory "emacs-nougat"))))
#+end_src

#+INCLUDE: "../nougat/packages/projectile/discover-projects.org"
* org-mode customizations
[[https://orgmode.org][org]] is life.
#+INCLUDE: "../nougat/packages/org-mode/setup.org::look"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::feel"

#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::add languages to babel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::set default header args"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::disable code evaluation prompts"

#+INCLUDE: "../nougat/packages/org-mode/extras/org-tidy.org"

#+INCLUDE: "../nougat/packages/org-mode/extras/nested-narrowing.org"

#+INCLUDE: "../nougat/packages/org-mode/extras/org-export.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/htmlize.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/toc-org.org"
##+INCLUDE: "../nougat/packages/org-mode/extras/ox-jira.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-gfm.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-beamer.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-avy.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-projectile.org"
##+INCLUDE: "../nougat/packages/org-mode/extras/org-roam.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-download.org"
#+include: "../nougat/packages/org-mode/extras/ox-hugo.org"
** COMMENT org-jira

#+begin_src emacs-lisp
(use-package org-jira
 :straight (org-jira :type git
               :host github
               :repo "ahungry/org-jira")
 :config (setq jiralib-url "https://neurala.atlassian.net")
     )
#+end_src

** strikethrough-done
Render org TODO states in the DONE category with struck-through text with a handy
color scheme.
#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "DeepSkyBlue"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))
#+end_src

** org-refile
from [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][here]]

#+begin_src emacs-lisp
(setq org-agenda-files (list my/org-path-name))
(setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

*** refile with links (broken)
From [[https://gist.github.com/samspills/895c29a1c0f6bf2e66c23149bfcc0f38][this gist]], set things up so that org-refile leaves a backlink behind.  This is
useful to me for my note style right now (as of <2020-07-08 Wed> because i usually
want to have a per-date work log tree, but move todos off where they belong under a
project.)

#+begin_src emacs-lisp
  ;; (setq org-id-link-to-org-use-id t)

  ;; (defun org-refile--insert-link ( &rest _ )
  ;;     (org-back-to-heading)
  ;;     (let* ((refile-region-marker (point-marker))
  ;;            (source-link (org-store-link nil)))
  ;;     (org-insert-heading)
  ;;     (insert source-link)
  ;;     (goto-char refile-region-marker)))

  ;; (advice-add 'org-refile
  ;;             :before
  ;;             #'org-refile--insert-link)
#+end_src

** org-fragtog
[[https://github.com/io12/org-fragtog][from]] here:
#+begin_src emacs-lisp
  (use-package org-fragtog
   :straight (org-fragtog :type git
                 :host github
                 :repo "io12/org-fragtog")
       )
(add-hook 'org-mode-hook 'org-fragtog-mode)

#+end_src

** org-ref

#+begin_src emacs-lisp
  ;; (use-package org-ref
  ;;  :straight (org-ref :type git
  ;;                :host github
  ;;                :repo "jkitchin/org-ref")
  ;;  :config
  ;;  (setq reftex-default-bibliography bibtex-completion-bibliography
  ;;        org-ref-default-bibliography bibtex-completion-bibliography)

  ;;      )
#+end_src

* COMMENT helm
##+INCLUDE: "../nougat/packages/helm/setup.org"
##+INCLUDE: "../nougat/packages/helm/extras/ace-jump-helm-line.org"
##+INCLUDE: "../nougat/packages/helm/extras/helm-ag.org" :
##+INCLUDE: "../nougat/packages/helm/extras/helm-bookmark.org"
##+INCLUDE: "../nougat/packages/helm/extras/helm-company.org"
##+INCLUDE: "../nougat/packages/helm/extras/helm-descbinds.org"
##+INCLUDE: "../nougat/packages/helm/extras/helm-flyspell.org"
##+INCLUDE: "../nougat/packages/helm/extras/helm-org-rifle.org"
##+INCLUDE: "../nougat/packages/helm/extras/helm-projectile.org"
** COMMENT helm-bibtex
[[https://github.com/tmalsburg/helm-bibtex#basic-configuration-recommended][helm-bibtex]] provides convenience methods for reference management.
#+begin_src emacs-lisp
      (use-package helm-bibtex
       :straight (helm-bibtex :type git
                     :host github
                     :repo "tmalsburg/helm-bibtex")
       :config
       (setq-default bibtex-completion-bibliography
             (concat my/org-path-name "library.bib"))
       (setq-default bibtex-completion-pdf-field "Files")
(setq bibtex-completion-notes-path (concat my/org-path-name "reference-notes"))
       )


#+end_src
** COMMENT org-ql

#+begin_src emacs-lisp
(use-package helm-org
     )
#+end_src

#+begin_src emacs-lisp
(use-package org-ql
 :straight (org-ql :type git
               :host github
               :repo "alphapapa/org-ql")
     )
#+end_src
* ivy
https://github.com/abo-abo/swiper
#+begin_quote
flexible, simple tools for minibuffer completion in Emacs

This repository contains:

Ivy, a generic completion mechanism for Emacs.

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

Swiper, an Ivy-enhanced alternative to isearch.
#+end_quote
#+INCLUDE: "../nougat/packages/ivy/ivy.org"

* yasnippet
YASnippet extends org-mode's =<s=-like templating in an arbitrary way.  This is useful
for quickly applying export settings, annotating code blocks, and the like.
#+INCLUDE: "../nougat/packages/yasnippet/yasnippet.org"
* git
#+INCLUDE: "../nougat/packages/gitignore/gitignore.org"
#+INCLUDE: "../nougat/packages/magit/setup.org"
** github
*** gist
#+INCLUDE: "../nougat/packages/github/gist.org"
* COMMENT multiple-cursors
#+INCLUDE: "../nougat/packages/multiple-cursors/multiple-cursors.org"
* COMMENT phi-search
This is an incremental search which works with multiple cursors and replaces the
normal bindings.

#+begin_src emacs-lisp
(use-package phi-search)
(require 'phi-search)
(require 'phi-replace)
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'phi-search)
(global-set-key (kbd "C-r") 'phi-search-backward)
(global-set-key (kbd "M-%") 'phi-replace-query)
#+end_src

* pandoc mode
#+INCLUDE: "../nougat/packages/pandoc-mode/pandoc-mode.org"
* language support
** lsp-mode
LSP is the language server protocol

#+begin_src emacs-lisp
(use-package lsp-mode
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  :init (setq lsp-keymap-prefix "s-l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
;; if you are helm user
;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src

** COMMENT CSV
#+INCLUDE: "../nougat/packages/csv-mode/csv-mode.org"
** LaTeX
#+INCLUDE: "../nougat/support/latex/latex.org"
** lisp
#+INCLUDE: "../nougat/support/lisp/lispy-mode.org"
** python
*** black
#+CAPTION: blacken lets you auto-blackify your python code
#+begin_src emacs-lisp
  ;;https://github.com/pythonic-emacs/blacken
  (use-package blacken
    :straight (blacken :type git :host github :repo "pythonic-emacs/blacken")
    :init (blacken-mode)
    :hook (python-mode . blacken-mode)
    :config     (setq blacken-only-if-project-is-blackened t))
#+end_src

*** pyvenv
#+begin_src emacs-lisp
(use-package pyvenv
 :straight (pyvenv :type git
               :host github
               :repo "jorgenschaefer/pyvenv")
)
#+end_src

*** poetry
#+CAPTION: poetry https://github.com/galaunay/poetry.el
#+begin_src emacs-lisp
(use-package poetry
:straight (poetry :type git
                  :host github
                  :repo "galaunay/poetry.el")
;; :config (poetry-tracking-mode)
)
#+end_src

*** COMMENT jedi
#+INCLUDE: "../nougat/support/python/jedi.org"
*** COMMENT elpy
#+INCLUDE: "../nougat/support/python/elpy.org"
** markdown
#+INCLUDE: "../nougat/support/markdown/markdown-mode.org"
** json

#+begin_src emacs-lisp
  (use-package json-mode
    :straight (json-mode :type git
                         :host github
                         :repo "joshwnj/json-mode")
    :bind-keymap ("C-c C-f" . json-pretty-print-buffer)
    )
#+end_src

** docker
#+INCLUDE: "../nougat/support/docker/dockerfile-mode.org"

*** docker

#+begin_src emacs-lisp
(use-package docker
 :straight (docker :type git
               :host github
               :repo "Silex/docker.el")
 :bind ("C-c d" . docker)
     )
#+end_src


** direnv
#+INCLUDE: "../nougat/support/direnv/direnv.org"

* hydras
#+INCLUDE: "../nougat/packages/hydra/setup.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-hera.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-org.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-projectile.org"
** window-hydra
From [[https://github.com/dsedivec/dot-emacs-d/blob/master/lisp/window-hydra.el][here]]
#+begin_src emacs-lisp
  (use-package windmove)
  (use-package ace-window
    :bind* (("C-<tab>" . ace-window)))

  (require 'windmove)
  (require 'ace-window)

  ;;;###autoload (autoload 'window-hydra/body "window-hydra" nil t)
  (defhydra window-hydra (:hint nil)
    "
    ^_i_^                  _1_ single window   _3_^ split window      _b_alance windows
  _j_   _l_  move buffer   _o_ther window      _\\_ transpose frame   s_w_ap window
    ^_k_^                  _←_ winner-undo     _0_^ delete window     _→_ winner redo
  "
    ("i" (aw-swap-window (windmove-find-other-window 'up)))
    ("j" (aw-swap-window (windmove-find-other-window 'left)))
    ("l" (aw-swap-window (windmove-find-other-window 'right)))
    ("k" (aw-swap-window (windmove-find-other-window 'down)))
    ("1" delete-other-windows)
    ("3" split-window-right)
    ("b" balance-windows)
    ("o" ace-window)
    ("\\" transpose-frame)
    ("w" ace-swap-window)
    ("<left>" winner-undo)
    ("0" delete-window)
    ("<right>" winner-redo)
    ("q" nil))

  (provide 'window-hydra)

  (global-set-key (kbd "C-M-_") 'window-hydra/body)
#+end_src

** COMMENT Other hydras

#+INCLUDE: "../nougat/packages/hydra/extras/hydra-bookmarks.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-elisp.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-helm.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-help.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-mark.org"


#+INCLUDE: "../nougat/packages/hydra/extras/hydra-python.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-register.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-window.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-yank-pop.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-zoom.org"
