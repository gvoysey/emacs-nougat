#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+language: en
#+startup: overview indent align
#+babel: :cache no
#+options: ^:nil num:nil tags:nil toc:nil* OS-specific
#+title: Emacs config, org-mode style.
#+description: A literate programming-style exposition of my Emacs configuration
This is the current version of my emacs configuration.  It is rendered to a
byte-compiled =init.el= by way of a slightly kludgey bash script.

Commented-out org-mode headings are neither shown here nor present in the tangled
resulting elisp, but they are present in [[https://github.com/gvoysey/emacs.d][the repo]] that houses this document.

#+INCLUDE: "./base.org"

* os-specific configurations
Some things only need to be tweaked for certain OSes, and happen early -- in this
case, before the package manager is initialized.
** mac os
*** Disable ⌘-q
Accidentally closing your editor window when you don't mean to just sucks.
#+begin_src emacs-lisp
(global-unset-key (kbd "s-q"))
#+end_src

** linux
*** Disable doc-view-mode defaults for pdf files
I prefer side-by-side pdf viewers over the in-emacs option for rendering PDFs.  This
forces it.
#+begin_src emacs-lisp
(defun ensc/mailcap-mime-data-filter (filter)
  ""
  (mapcar (lambda(major)
        (append (list (car major))
            (remove nil
                (mapcar (lambda(minor)
                      (when (funcall filter (car major) (car minor) (cdr minor))
                    minor))
                    (cdr major)))))
      mailcap-mime-data))

(defun ensc/no-pdf-doc-view-filter (major minor spec)
  (if (and (string= major "application")
       (string= minor "pdf")
       (member '(viewer . doc-view-mode) spec))
      nil
    t))

(eval-after-load 'mailcap
  '(progn
     (setq mailcap-mime-data
       (ensc/mailcap-mime-data-filter 'ensc/no-pdf-doc-view-filter))))
#+end_src

* boilerplate
Set up some variables pointing to where normal lab notebook things live.
** my/org-path-name
#+begin_src emacs-lisp
  (defvar my/org-path-name (expand-file-name "~/Notebook/"))
#+end_src

** my/org-file-name
#+begin_src emacs-lisp
  (defun my/make-org-file-name (file-name)
    (concat my/org-path-name file-name))
#+end_src

** my/notes-file-name
#+begin_src emacs-lisp
  (defvar my/notes-file-name (my/make-org-file-name "notes.org"))
#+end_src

** my/template-directory
#+begin_src emacs-lisp
  (defvar my/template-directory (concat my/org-path-name "templates"))
#+end_src

** my/make-template-file-name
#+begin_src emacs-lisp
  (defun my/make-template-file-name (file-name)
    (concat my/template-directory file-name))
#+end_src

* themes
Emacs has many themes that it can use.
** solarized-theme
Solarized is a nice theme.  Easy on the eyes.  Looks like garbage in some terminals,
though, so we'll pick another.

#+begin_src emacs-lisp
(use-package solarized-theme
    :config
    (when (display-graphic-p)
         (load-theme 'solarized-gruvbox-dark t)
         (disable-theme 'leuven)
         (enable-theme 'solarized-gruvbox-dark))
)
(unless (display-graphic-p)
    (load-theme 'leuven t)
    )
#+end_src

* emacs
Configuration related core editor functions are here.
#+INCLUDE: "../nougat/emacs/fonts.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/autosaves.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/backups.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/cursor.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/disable.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/editing.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/key-bindings.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/minor-modes.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/modeline.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/undo-tree.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/diff-kill.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/flycheck.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/neotree.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/dired.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/popwin.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/ws-butler.org" :minlevel 2
#+INCLUDE: "../nougat/emacs/avy.org" :minlevel 2

** exec-path from shell
[[https://github.com/purcell/exec-path-from-shell][This]] is a GNU Emacs library to ensure environment variables inside Emacs look the
same as in the user's shell.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
  :config
   (exec-path-from-shell-initialize)
)
;;    :config
;;    (when (memq window-system '(mac ns ox))
;;      (exec-path-from-shell-initialize)))
#+end_src

** COMMENT sr-speedbar
#+include: "../nougat/emacs/srspeedbar.org"

#+begin_src emacs-lisp
(setq speedbar-initial-expansion-list-name "quick buffers")
(global-set-key (kbd "M-1") 'sr-speedbar-toggle)
#+end_src

** COMMENT buffer-move
#+CAPTION: Move buffers around more easily 
#+begin_src emacs-lisp
  (use-package buffer-move
  :straight(buffer-move
  :type git
  :host github
  :repo "lukhas/buffer-move"))

  ;; ((global-set-key (kbd "<C-S-up>")     'buf-move-up)
  ;; (global-set-key (kbd "<C-S-down>")   'buf-move-down)
  ;; (global-set-key (kbd "<C-S-left>")   'buf-move-left)
  ;; (global-set-key (kbd "<C-S-right>")  'buf-move-right)
  ;; ;;(setq buffer-move-stay-after-swap t)
  ;; ;;(setq buffer-move-behavior 'move)
  ;; )
#+end_src

** split window sensibly
From [[https://stackoverflow.com/questions/23659909/reverse-evaluation-order-of-split-height-threshold-and-split-width-threshold-in][SO]], this is a way to prefer vertical splits over horizontal ones depending on
window size.
#+begin_src emacs-lisp
(defun my-split-window-sensibly (&optional window)
  (let ((window (or window (selected-window))))
    (or (and (window-splittable-p window t)
             ;; Split window horizontally.
             (with-selected-window window
               (split-window-right)))
        (and (window-splittable-p window)
             ;; Split window vertically.
             (with-selected-window window
               (split-window-below)))
        (and (eq window (frame-root-window (window-frame window)))
             (not (window-minibuffer-p window))
             ;; If WINDOW is the only window on its frame and is not the
             ;; minibuffer window, try to split it horizontally disregarding
             ;; the value of `split-width-threshold'.
             (let ((split-width-threshold 0))
               (when (window-splittable-p window t)
                 (with-selected-window window
                   (split-window-right))))))))

(setq split-window-preferred-function 'my-split-window-sensibly)
#+end_src

** auto-revert mode
Auto-revert acts a lot more like modern editors (sublime, etc), which helps a great
deal when editing files with potentially many editors at once.

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

** display line numbers
Line numbers are good.
#+begin_src emacs-lisp
(global-display-line-numbers-mode)
#+end_src

** COMMENT dashboard
[[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] is a pretty cute splash screen mode for emacs that's a nice way to jump
between projects.
#+begin_src emacs-lisp
  (use-package dashboard
    :straight (dashboard :type git
                         :host github
                         :repo "emacs-dashboard/emacs-dashboard")
    :config
    (when (display-graphic-p) (dashboard-setup-startup-hook)))

    (when (display-graphic-p)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
      (setq dashboard-center-content t)
      (setq dashboard-items '((recents  . 5)
                              (bookmarks . 5)
                              (projects . 5)
                              (agenda . 5)
                              ;;                        (registers . 5)
                              ))
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-navigator t)
      (setq dashboard-set-footer nil))
#+end_src

** awesome-tabs
Emacs can have tabs! [[https://github.com/manateelazycat/awesome-tab][awesome tab]] provides them.
#+begin_src emacs-lisp
(use-package awesome-tab
  :straight (awesome-tab :type git
                         :host github
                         :repo "manateelazycat/awesome-tab")
  :config
  (when (display-graphic-p) (awesome-tab-mode t))
)
#+end_src

** diff-hl

#+begin_src emacs-lisp
(use-package diff-hl
 :straight (diff-hl :type git
               :host github
               :repo "dgutov/diff-hl")
 :config (global-diff-hl-mode))
#+end_src

** shift-tab
Sometimes it's handy to go back exactly a tab width.

#+begin_src emacs-lisp
(global-set-key (kbd "<S-tab>") 'un-indent-by-tab-width)
(defun un-indent-by-tab-width ()
  "remove 4 spaces from beginning of of line"
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (concat "^" (make-string tab-width ?\ ))
        (replace-match "")))))

#+end_src

** webpaste
#+begin_src emacs-lisp
(use-package webpaste
  :bind (("C-c C-p C-b" . webpaste-paste-buffer)
         ("C-c C-p C-r" . webpaste-paste-region))
  :config
  (progn
    (setq webpaste-provider-priority '("dpaste.org" "dpaste.com")))
    (setq webpaste-paste-confirmation t)
)
#+end_src

** dired-peek

#+begin_src emacs-lisp
;;preview files in dired
(use-package peep-dired
  :ensure t
  :defer t ; don't access `dired-mode-map' until `peep-dired' is loaded
  :bind (:map dired-mode-map
              ("P" . peep-dired)))
#+end_src

** hl-todo

#+begin_src emacs-lisp
(use-package hl-todo
 :straight (hl-todo :type git
               :host github
               :repo "tarsius/hl-todo")
 :config
       (setq global-hl-todo-mode t)
       (setq hl-todo-keyword-faces
             '(("todo"   . "#FF0000")
               ("fixme"  . "#FF0000"))
       )
)
#+end_src

** COMMENT centered-cursor
From [[https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs][centered-cursor in vanilla emacs]], ape centered cursor mode with some speedups
#+begin_src emacs-lisp
(setq scroll-preserve-screen-position t
      scroll-conservatively 0
      maximum-scroll-margin 0.5
      scroll-margin 99999)
#+end_src

** Hilight row
#+begin_src emacs-lisp
(setq global-hl-line-mode t)
#+end_src

* projectile

[[https://github.com/bbatsov/projectile][projectile]] is a project interaction library for emacs.

#+INCLUDE: "../nougat/packages/projectile/setup.org"

Override default project directory path.
#+begin_src emacs-lisp
  (setq projectile-project-search-path (list (expand-file-name "~/Projects/")
                                             (expand-file-name "~/Projects/nemo-api")
                                             (expand-file-name "~/Notebook)")
                                             (expand-file-name "~/lab-notebook")
                                             (expand-file-name (concat user-emacs-directory "emacs-nougat"))))
  ;;(setq projectile-project-directory (expand-file-name "~/Projects/"))
#+end_src

#+INCLUDE: "../nougat/packages/projectile/discover-projects.org"
* org-mode customizations
[[https://orgmode.org][org]] is life.
#+INCLUDE: "../nougat/packages/org-mode/setup.org::look"
#+INCLUDE: "../nougat/packages/org-mode/setup.org::feel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::add languages to babel"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::set default header args"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-babel.org::disable code evaluation prompts"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-capture.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-tidy.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/nested-narrowing.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/dynamic-tag-position.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-export.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/htmlize.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/toc-org.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-jira.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-gfm.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/ox-beamer.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-avy.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-projectile.org"
#+INCLUDE: "../nougat/packages/org-mode/extras/org-roam.org"

* helm
#+INCLUDE: "../nougat/packages/helm/setup.org"
#+INCLUDE: "../nougat/packages/helm/extras/ace-jump-helm-line.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-ag.org" :
#+INCLUDE: "../nougat/packages/helm/extras/helm-bookmark.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-company.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-descbinds.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-flyspell.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-org-rifle.org"
#+INCLUDE: "../nougat/packages/helm/extras/helm-projectile.org"
* ivy
https://github.com/abo-abo/swiper
#+begin_quote
flexible, simple tools for minibuffer completion in Emacs

This repository contains:

Ivy, a generic completion mechanism for Emacs.

Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

Swiper, an Ivy-enhanced alternative to isearch.
#+end_quote
#+INCLUDE: "../nougat/packages/ivy/ivy.org"

* yasnippet
YASnippet extends org-mode's =<s=-like templating in an arbitrary way.  This is useful
for quickly applying export settings, annotating code blocks, and the like.
#+INCLUDE: "../nougat/packages/yasnippet/yasnippet.org"
* git
#+INCLUDE: "../nougat/packages/gitignore/gitignore.org"
#+INCLUDE: "../nougat/packages/magit/setup.org"
** github
*** gist
#+INCLUDE: "../nougat/packages/github/gist.org"
* multiple-cursors
#+INCLUDE: "../nougat/packages/multiple-cursors/multiple-cursors.org"
* phi-search
This is an incremental search which works with multiple cursors and replaces the
normal bindings.

#+begin_src emacs-lisp
(use-package phi-search)
(require 'phi-search)
(require 'phi-replace)
#+end_src

#+begin_src emacs-lisp
(global-set-key (kbd "C-s") 'phi-search)
(global-set-key (kbd "C-r") 'phi-search-backward)
(global-set-key (kbd "M-%") 'phi-replace-query)
#+end_src

* pandoc mode
#+INCLUDE: "../nougat/packages/pandoc-mode/pandoc-mode.org"
* language support
** lsp-mode
LSP is the language server protocol

#+begin_src emacs-lisp
(use-package lsp-mode
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  :init (setq lsp-keymap-prefix "s-l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (python-mode . lsp-deferred)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred))

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
;; if you are helm user
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src

** COMMENT CSV
#+INCLUDE: "../nougat/packages/csv-mode/csv-mode.org"
** LaTeX
#+INCLUDE: "../nougat/support/latex/latex.org"
** lisp
#+INCLUDE: "../nougat/support/lisp/lispy-mode.org"
** python
*** black
#+CAPTION: blacken lets you auto-blackify your python code
#+begin_src emacs-lisp
;;https://github.com/pythonic-emacs/blacken
(use-package blacken
:straight (blacken :type git :host github :repo "pythonic-emacs/blacken")
:init (blacken-mode))
(add-hook 'python-mode-hook 'blacken-mode)
(setq blacken-only-if-project-is-blackened t)
;; (setq blacken-allow-py36 t)
#+end_src

*** COMMENT poetry
#+CAPTION: poetry https://github.com/galaunay/poetry.el
#+begin_src emacs-lisp
(use-package pyvenv
 :straight (pyvenv :type git
               :host github
               :repo "jorgenschaefer/pyvenv")
)

(use-package poetry
:straight (poetry :type git
                  :host github
                  :repo "galaunay/poetry.el")
:config (poetry-tracking-mode)
)
#+end_src

*** COMMENT Jedi
#+INCLUDE: "../nougat/support/python/jedi.org"
*** COMMENT elpy
#+INCLUDE: "../nougat/support/python/elpy.org"
** markdown
#+INCLUDE: "../nougat/support/markdown/markdown-mode.org"
** docker
#+INCLUDE: "../nougat/support/docker/dockerfile-mode.org"
** COMMENT direnv
#+INCLUDE: "../nougat/support/direnv/direnv.org"

* hydras
#+INCLUDE: "../nougat/packages/hydra/setup.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-hera.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-org.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-projectile.org"
** window-hydra
From [[https://github.com/dsedivec/dot-emacs-d/blob/master/lisp/window-hydra.el][here]]
#+begin_src emacs-lisp
(use-package windmove)
(use-package ace-window)

(require 'windmove)
(require 'ace-window)

;;;###autoload (autoload 'window-hydra/body "window-hydra" nil t)
(defhydra window-hydra (:hint nil)
  "
  ^_i_^                  _1_ single window   _3_^ split window      _b_alance windows
_j_   _l_  move buffer   _o_ther window      _\\_ transpose frame   s_w_ap window
  ^_k_^                  _←_ winner-undo     _0_^ delete window     _→_ winner redo
"
  ("i" (aw-swap-window (windmove-find-other-window 'up)))
  ("j" (aw-swap-window (windmove-find-other-window 'left)))
  ("l" (aw-swap-window (windmove-find-other-window 'right)))
  ("k" (aw-swap-window (windmove-find-other-window 'down)))
  ("1" delete-other-windows)
  ("3" split-window-right)
  ("b" balance-windows)
  ("o" ace-window)
  ("\\" transpose-frame)
  ("w" ace-swap-window)
  ("<left>" winner-undo)
  ("0" delete-window)
  ("<right>" winner-redo)
  ("q" nil))

(provide 'window-hydra)

(global-set-key (kbd "C-M-_") 'window-hydra/body)
#+end_src

** COMMENT Other hydras

#+INCLUDE: "../nougat/packages/hydra/extras/hydra-bookmarks.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-elisp.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-helm.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-help.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-mark.org"


#+INCLUDE: "../nougat/packages/hydra/extras/hydra-python.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-register.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-window.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-yank-pop.org"
#+INCLUDE: "../nougat/packages/hydra/extras/hydra-zoom.org"
